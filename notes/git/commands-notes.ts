[{"content":"## Viewing the Commit History \n\n`$ git log --pretty=format:\"%h - %an, %ar : %s\"`\n\n`$ git log --oneline`\n\n| Flags  |  Meaning                                                    |\n|----------------------|--------------------------------------------------------------------|\n| --h               | Finds elements based on their implicit or explicit ARIA role       |\n| --an          | Author name |\n|--ar    |    Author date, relative       |\n|--s               | Subject, Message  |\n","type":"text","id":"qxjds"},{"content":"## Undoing Things\n\n`$ git commit --amend` \n\nExample:\n\n`$ git commit -m 'init commit'`\n\n`$ git add forgotten_file`\n\n`$ git commit --amend`\n\n This series of command end up with a single commit - the second commit replace the result of the first.\n\n## Changing the message of older or multiple commit messages\n\n`$ git rebase -i HEAD~n`  - command to display a list of the last n commits\n\n## The role of Reset\n\n`$ git reset --soft HEAD~n`  - move the branch HEAD points to (stop here if `--soft`)\n\n`$ git reset HEAD~n`  - make the Index look like HEAD (stop here unless `--hard`)\n\n`$ git reset --hard HEAD~n`  - make the Working Directory look like the Index\n\n","type":"text","id":"b0zx6"},{"content":"## Working with remotes\n\n#### Adding remote repositories:\n\n`$ git remote add [shortname] [url]`  and then `$ git fetch [shortname]`\n\n#### Fetching and Pulling:\n\n`$ git fetch [shrotname]` - it doesn't automatically merge fetched date with any of your work.\n\n`$ git pull` - it fetches data from the server you originally cloned from and automatically tries to merge it into the code you're working on.\n\n\n#### Pushing to Your Repository:\n\n`$ git push [remote-name] [branch-name]`\n\n#### Inspecting A Remote:\n\n`$ git remote show [remote-name]`\n\n#### Removing and Renaming Remotes:\n\n`$ git remote rename [OLD-remote-name] [NEW-remote-name]`\n\n`$ git remote rm [remmote-name]`","type":"text","id":"td2nw"},{"content":"## Tagging\n\n#### Listing and showing tags\n\n`$ git tag` - listing\n\n`$ git show [tag-name]` - showing\n\n#### Creating tags\n\n`$ git tag -a v1.4 -m 'my version 1.4'`\n\n#### Tagging Later\n\n`$ git tag -a v1.4 [commit-hash]`\n\n#### Sharing Later\n\n`$ git push origin [tag-name]` - to push up a single tag\n\n`$ git push origin --tags` - to push up all tags at once","type":"text","id":"mu9je"},{"content":"## Git Aliases\n\n`$ git config --global alias.last 'log -1 HEAD'` - to see last commit easily\n\n`$ git config --global alias.unstage 'reset HEAD --'` - unstage alias to Git\n\nOther examples:\n\n`$ git config --global alias.ci commit`\n\n`$ git config --global alias.st status`\n\n`$ git config --global alias.ch checkout`\n\n`$ git config --global alias.br branch`\n\n","type":"text","id":"ko7bq"},{"content":"## Branching\n\n#### Creating and Switching a Branch\n\n`$ git branch [branch name]` - to create a new branch\n\n`$ git checkout [branch name]` - to switch to a branch\n\n- or shorthand:\n\n`$ git checkout -b [branch name]` - create and switch to a new branch\n\n- fetching from server:\n\n`$ git fetch origin`\n\n`$ git checkout -b [featureA] origin/featureA` - this gives local brnach that starts where origin/featureA is\n\n\n#### Branch Management\n\n`$ git branch`\n\n`$ git branch -v` - to see the last commit on each branch\n\n`$ git branch --no-merged` - to see branches containing work that hasn't been merged yet\n\n`$ git branch --merged` - to see which branches are already merged into the branch you're on\n\n#### Deleting a Branch\n\n`$ git branch -d [branch name]` - delete a branch that has been already merged\n\n`$ git branch -D [branch name]` - delete a branch that hasn't been merged yet and lose that work\n \n`$ git push --delete [brnach-name]` - delete a remote branch\n\n#### Tracking Branches\n\n`$ git branch -u/--set-upstream origin/featureA` - set current branch to automatically push and pull to specified remote branch\n\n\n#### Pulling\n\n`$ git pull` - get the data and merge it automatically","type":"text","id":"qld24"},{"content":"## Rebasing\n\n### Basic Rebase\n\n`$ git checkout featureA` \n\n`$ git rebase master` \n\n### More Complex Rebase 1\n\n`$ git rebase --onto master server client` -  takes the changes on client that aren't on server and reply them on your master branch by using --onto\n\nand then...\n\n`$ git checkout master`\n\n`$ git merge client` - fast-forward merge\n\n`$ git rebase master server` - rebase server branch onto the master without having to check it out first\n\nand then...\n\n`$ git checkout master`\n\n`$ git merge server` - fast-forward merge\n\nand then...\n\n`$ git branch -d client`\n\n`$ git branch -d server`\n\n## \n\n### More Complex Rebase 2\n\n`$ git checkout -b featureB`  and commit some work\n\n`$ git checkout master`\n\n`$ git checkout -b featureA`  and commit some work\n\n`$ git rebase master` \n\n`$ git push -f featureA`\n\n`$ git checkout -b featureBv2` \n\n`$ git merge --no-commit --squash featureB`  - the `--squash` option takes all the work on the merged branch and squashes it into one non-merge commit, while the `--no-commit` tells git not to automatically record a commit.\n\n(then change implementation)\n\n`$ git commit` \n\n`$ git push featureBv2` \n\n ","type":"text","id":"5udbi"},{"content":"## Squashin Technic\n\n\n\n`$ git commit -m 'featue version1'` \n\n`$ git commit -m 'featue version 2'`\n\n`$ git commit -m 'featue version 3'`\n\n`$ git reset --soft HEAD~2`\n\n`$ git commit -m 'feature done'` the commit with version 2 of the feature is no longer in the history","type":"text","id":"vnc2h"}]